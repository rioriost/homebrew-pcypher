todo_list = [
    """MATCH (martin:Person {name: 'Martin Sheen'}), (oliver:Person {name: 'Oliver Stone'}), p = shortestPath((martin)-[*..15]-(oliver)) RETURN p""",  # 67
    """MATCH (martin:Person {name: 'Martin Sheen'}), (michael:Person {name: 'Michael Douglas'}), p = allShortestPaths((martin)-[*]-(michael)) RETURN p""",  # 67
    """MATCH (n:Member) RETURN org.opencypher.function.example.join(collect(n.name)) AS members""",  # 193
    """MATCH (n:Member) RETURN org.opencypher.function.example.longestString(n.name) AS member""",  # 193
]

data_list = [
    """MATCH (n {name: 'John'})-[:FRIEND]-(friend) WITH n, count(friend) AS friendsCount WHERE friendsCount > 3 RETURN n, friendsCount""",
    """MATCH (n {name: 'John'})-[:FRIEND]-(friend) WITH n, count(friend) AS friendsCount SET n.friendsCount = friendsCount RETURN n.friendsCount""",
    """CREATE (adam:User {name: 'Adam'}), (pernilla:User {name: 'Pernilla'}), (david:User {name: 'David'}), (adam)-[:FRIEND]->(pernilla), (pernilla)-[:FRIEND]->(david)""",
    """MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend) MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend) RETURN friend_of_a_friend.name AS fofName""",
    """MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend), (friend)-[r2:FRIEND]-(friend_of_a_friend) RETURN friend_of_a_friend.name AS fofName""",
    """MATCH (me)-[:KNOWS*1..2]-(remote_friend) WHERE me.name = 'Filipa' RETURN remote_friend.name""",
    """WITH 1 AS int RETURN cos(int)""",
    """WITH [1, 1.0] AS list CREATE ({l: list})""",
    """WITH ['a', 'b', 'c'] AS list, 1.5 AS float RETURN list[toInteger(float)]""",
    """RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] AS list""",
    """RETURN range(0, 10)[3]""",
    """RETURN range(0, 10)[-3]""",
    """RETURN range(0, 10)[0..3]""",
    """RETURN range(0, 10)[0..-5]""",
    """RETURN range(0, 10)[-5..]""",
    """RETURN range(0, 10)[..4]""",
    """RETURN range(0, 10)[15]""",
    """RETURN range(0, 10)[5..15]""",
    """RETURN size(range(0, 10)[0..3])""",
    """RETURN [x IN range(0,10) WHERE x % 2 = 0 | x^3] AS result""",
    """RETURN [x IN range(0,10) WHERE x % 2 = 0] AS result""",
    """RETURN [x IN range(0,10)| x^3] AS result""",
    """MATCH (a:Person {name: 'Charlie Sheen'}) RETURN [(a)-[]->(b) WHERE b:Movie | b.year] AS years""",
    """RETURN {key: 'Value', listKey: [{inner: 'Map1'}, {inner: 'Map2'}]}""",
    """MATCH (actor:Person {name: 'Charlie Sheen'})-[:ACTED_IN]->(movie:Movie) RETURN actor { .name, .realName, movies: collect(movie { .title, .year })}""",
    """MATCH (actor:Person)-[:ACTED_IN]->(movie:Movie) WITH actor, count(movie) AS nrOfMovies RETURN actor { .name, nrOfMovies }""",
    """MATCH (actor:Person {name: 'Charlie Sheen'}) RETURN actor { .*, .age }""",
    """RETURN 1 > 0.5""",
    """RETURN 'string' <= true""",
    """UNWIND [1, true, '', 3.14, {}, [2], null] AS i RETURN i ORDER BY i""",
    """UNWIND [[null], [null]] AS i RETURN DISTINCT i""",
    """MATCH (n) RETURN CASE n.eyes WHEN 'blue' THEN 1 WHEN 'brown' THEN 2 ELSE 3 END AS result""",
    """MATCH (n) RETURN CASE WHEN n.eyes = 'blue' THEN 1 WHEN n.age < 40 THEN 2 ELSE 3 END AS result""",
    """MATCH (n) RETURN n.name, CASE n.age WHEN n.age IS NULL THEN -1 ELSE n.age - 10 END AS age_10_years_ago""",
    """MATCH (n) RETURN n.name, CASE WHEN n.age IS NULL THEN -1 ELSE n.age - 10 END AS age_10_years_ago""",
    """MATCH (n:Person) WHERE n.name = $name RETURN n""",
    """MATCH (n:Person {name: $name}) RETURN n""",
    """MATCH (n:Person) WHERE n.name STARTS WITH $name RETURN n.name""",
    """CREATE ($props)""",
    """UNWIND $props AS properties CREATE (n:Person) SET n = properties RETURN n""",
    """MATCH (n:Person) WHERE n.name='Michaela' SET n = $props""",
    """MATCH (n:Person) RETURN n.name SKIP $s LIMIT $l""",
    """CREATE (a:Person {name: 'Anne', eyeColor: 'blue'}), (b:Person {name: 'Bill', eyeColor: 'brown'}), (c:Person {name: 'Carol', eyeColor: 'blue'}) WITH [a, b, c] AS ps UNWIND ps AS p RETURN DISTINCT p.eyeColor""",
    """WITH {person: {name: 'Anne', age: 25}} AS p RETURN p.person.name""",
    """CREATE (a:Restaurant {name: 'Hungry Jo', rating_hygiene: 10, rating_food: 7}), (b:Restaurant {name: 'Buttercup Tea Rooms', rating_hygiene: 5, rating_food: 6}), (c1:Category {name: 'hygiene'}), (c2:Category {name: 'food'}) WITH a, b, c1, c2 MATCH (restaurant:Restaurant), (category:Category) WHERE restaurant["rating_" + category.name] > 6 RETURN DISTINCT restaurant.name""",
    """WITH 2 AS number, 3 AS exponent RETURN number ^ exponent AS result""",
    """WITH -3 AS a, 4 AS b RETURN b - a AS result""",
    """WITH 4 AS one, 3 AS two RETURN one > two AS result""",
    """WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames UNWIND somenames AS names WITH names AS candidate WHERE candidate STARTS WITH 'Jo' RETURN candidate""",
    """WITH [2, 4, 7, 9, 12] AS numberlist UNWIND numberlist AS number WITH number WHERE number = 4 OR (number > 6 AND number < 10) RETURN number""",
    """RETURN [1,2,3,4,5]+[6,7] AS myList""",
    """WITH [2, 3, 4, 5] AS numberlist UNWIND numberlist AS number WITH number WHERE number IN [2, 3, 8] RETURN number""",
    """WITH ['Anne', 'John', 'Bill', 'Diane', 'Eve'] AS names RETURN names[1..3] AS result""",
    """MATCH (n) WHERE 21 < n.age <= 30 RETURN n""",
    """MATCH (n) WHERE 21 < n.age AND n.age <= 30 RETURN n""",
    """MATCH (n) RETURN n""",
    """MATCH (movie:Movie) RETURN movie.title""",
    """MATCH (director {name: 'Oliver Stone'})-[]-(movie) RETURN movie.title""",
    """MATCH (:Person {name: 'Oliver Stone'})-[]-(movie:Movie) RETURN movie.title""",
    """MATCH (:Person {name: 'Oliver Stone'})-[]->(movie) RETURN movie.title""",
    """MATCH (:Person {name: 'Oliver Stone'})-[r]->(movie) RETURN type(r)""",
    """MATCH (wallstreet:Movie {title: 'Wall Street'})<-[:ACTED_IN]-(actor) RETURN actor.name""",
    """MATCH (wallstreet {title: 'Wall Street'})<-[:ACTED_IN|:DIRECTED]-(person) RETURN person.name""",
    """MATCH (wallstreet {title: 'Wall Street'})<-[r:ACTED_IN]-(actor) RETURN r.role""",
    """MATCH (charlie:Person {name: 'Charlie Sheen'}), (rob:Person {name: 'Rob Reiner'}) CREATE (rob)-[:`TYPE WITH SPACE`]->(charlie)""",
    """MATCH (n {name: 'Rob Reiner'})-[r:`TYPE WITH SPACE`]->() RETURN type(r)""",
    """MATCH (charlie {name: 'Charlie Sheen'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director) RETURN movie.title, director.name""",
    """MATCH (martin {name: 'Charlie Sheen'})-[:ACTED_IN*1..3]-(movie:Movie) RETURN movie.title""",
    """MATCH p = (actor {name: 'Charlie Sheen'})-[:ACTED_IN*2]-(co_actor) RETURN relationships(p)""",
    """MATCH (charlie:Person {name: 'Charlie Sheen'}), (martin:Person {name: 'Martin Sheen'}) CREATE (charlie)-[:X {blocked: FALSE}]->(:UNBLOCKED)<-[:X {blocked: FALSE}]-(martin) CREATE (charlie)-[:X {blocked: TRUE}]->(:BLOCKED)<-[:X {blocked: FALSE}]-(martin)""",
    """MATCH p = (charlie:Person)-[* {blocked:false}]-(martin:Person) WHERE charlie.name = 'Charlie Sheen' AND martin.name = 'Martin Sheen' RETURN p""",
    """MATCH (wallstreet:Movie {title: 'Wall Street'})-[*0..1]-(x) RETURN x""",
    """MATCH p = (michael {name: 'Michael Douglas'})-[]->() RETURN p""",
    """MATCH (a)-[r]-(b) WHERE id(r)= 0 RETURN a,b""",
    """MATCH (n) WHERE id(n)= 0 RETURN n""",
    """MATCH ()-[r]->() WHERE id(r)= 0 RETURN r""",
    """MATCH (n) WHERE id(n) IN [0, 3, 5] RETURN n""",
    """MATCH (a:Movie {title: 'Wall Street'}) OPTIONAL MATCH (a)-[]->(x) RETURN x""",
    """MATCH (a:Movie {title: 'Wall Street'}) OPTIONAL MATCH (a)-[]->(x) RETURN x, x.name""",
    """MATCH (a:Movie {title: 'Wall Street'}) OPTIONAL MATCH (a)-[r:ACTS_IN]->() RETURN a.title, r""",
    """MATCH (u:User {id: $user}) MATCH (old:Product {id: $product})<-[:BOUGHT]-(u) MATCH (store)-[:IN]->(c:City {name: $city}), (store)-[:SELLS]->(new:Product), (new)-[:MADE_BY]->(brand)<-[:MADE_BY]-(old) WHERE new.availability > 0 AND new.category = old.category RETURN store, count(DISTINCT new) AS offers ORDER BY offers""",
    """MANDATORY MATCH (u:User {id: $user}) MANDATORY MATCH (c:City {name: $city}) MANDATORY MATCH (old:Product {id: $product})<-[:BOUGHT]-(u) MATCH (store)-[:IN]->(c), (store)-[:SELLS]->(new:Product), (new)-[:MADE_BY]->(brand)<-[:MADE_BY]-(old) WHERE new.availability > 0 AND new.category = old.category RETURN store, count(DISTINCT new) AS offers ORDER BY offers""",
    """MATCH (n {name: 'B'}) RETURN n""",
    """MATCH (n {name: 'A'})-[r:KNOWS]->(c) RETURN r""",
    """MATCH (n {name: 'A'}) RETURN n.name""",
    """MATCH p = (a {name: 'A'})-[r]->(b) RETURN *""",
    """MATCH (`This isn\'t a common variable`) WHERE `This isn\'t a common variable`.name = 'A' RETURN `This isn\'t a common variable`.happy""",
    """MATCH (a {name: 'A'}) RETURN a.age AS SomethingTotallyDifferent""",
    """MATCH (n) RETURN n.age""",
    """MATCH (a {name: 'A'}) RETURN a.age > 30, "I'm a literal", (a)-[]->()""",
    """MATCH (a {name: 'A'})-[]->(b) RETURN DISTINCT b""",
    """MATCH (david {name: 'David'})-[]-(otherPerson)-[]->() WITH otherPerson, count(*) AS foaf WHERE foaf > 1 RETURN otherPerson.name""",
    """MATCH (n) WITH n ORDER BY n.name DESC LIMIT 3 RETURN collect(n.name)""",
    """MATCH (n {name: 'Anders'})-[]-(m) WITH m ORDER BY m.name DESC LIMIT 1 MATCH (m)-[]-(o) RETURN o.name""",
    """UNWIND [1, 2, 3] AS x RETURN x""",
    """WITH [1, 1, 2, 2] AS coll UNWIND coll AS x WITH DISTINCT x RETURN collect(x) AS setValue""",
    """UNWIND $events AS event MERGE (y:Year {year: event.year}) MERGE (y)<-[:IN]-(e:Event {id: event.id}) RETURN e.id AS x ORDER BY x""",
    """MATCH (n) WHERE n.name = 'Peter' XOR (n.age < 30 AND n.name = 'Tobias') OR NOT (n.name = 'Tobias' OR n.name = 'Peter') RETURN n.name, n.age""",
    """MATCH (n) WHERE n:Swedish RETURN n.name, n.age""",
    """MATCH (n) WHERE n.age < 30 RETURN n.name, n.age""",
    """MATCH (n)-[k:KNOWS]->(f) WHERE k.since < 2000 RETURN f.name, f.age, f.email""",
    """WITH 'AGE' AS propname MATCH (n) WHERE n[toLower(propname)]< 30 RETURN n.name, n.age""",
    """MATCH (n) WHERE exists(n.belt) RETURN n.name, n.belt""",
    """MATCH (n) WHERE n.name STARTS WITH 'Pet' RETURN n.name, n.age""",
    """MATCH (n) WHERE n.name ENDS WITH 'ter' RETURN n.name, n.age""",
    """MATCH (n) WHERE n.name CONTAINS 'ete' RETURN n.name, n.age""",
    """MATCH (n) WHERE NOT n.name ENDS WITH 's' RETURN n.name, n.age""",
    """MATCH (tobias {name: 'Tobias'}), (others) WHERE others.name IN ['Andres', 'Peter'] AND (tobias)<-[]-(others) RETURN others.name, others.age""",
    """MATCH (persons), (peter {name: 'Peter'}) WHERE NOT (persons)-[]->(peter) RETURN persons.name, persons.age""",
    """MATCH (n) WHERE (n)-[:KNOWS]-({name: 'Tobias'}) RETURN n.name, n.age""",
    """MATCH (n)-[r]->() WHERE n.name='Andres' AND type(r) STARTS WITH 'K' RETURN type(r), r.since""",
    """MATCH (a) WHERE a.name IN ['Peter', 'Tobias'] RETURN a.name, a.age""",
    """MATCH (n) WHERE n.belt = 'white' RETURN n.name, n.age, n.belt""",
    """MATCH (n) WHERE n.belt = 'white' OR n.belt IS NULL RETURN n.name, n.age, n.belt ORDER BY n.name""",
    """MATCH (person) WHERE person.name = 'Peter' AND person.belt IS NULL RETURN person.name, person.age, person.belt""",
    """MATCH (a) WHERE a.name >= 'Peter' RETURN a.name, a.age""",
    """MATCH (a) WHERE a.name > 'Andres' AND a.name < 'Tobias' RETURN a.name, a.age""",
    """MATCH (n) RETURN n.name, n.age ORDER BY n.name""",
    """MATCH (n) RETURN n.name, n.age ORDER BY n.age, n.name""",
    """MATCH (n) RETURN n.name, n.age ORDER BY n.name DESC""",
    """MATCH (n) RETURN n.length, n.name, n.age ORDER BY n.length""",
    """MATCH (n) RETURN n.name ORDER BY n.name SKIP 3""",
    """MATCH (n) RETURN n.name ORDER BY n.name SKIP 1 LIMIT 2""",
    """MATCH (n) RETURN n.name ORDER BY n.name SKIP toInteger(3*rand())+ 1""",
    """MATCH (n) RETURN n.name ORDER BY n.name LIMIT 3""",
    """MATCH (n) RETURN n.name ORDER BY n.name LIMIT toInteger(3 * rand())+ 1""",
    """CREATE (n)""",
    """CREATE (n), (m)""",
    """CREATE (n:Person)""",
    """CREATE (n:Person:Swedish)""",
    """CREATE (n:Person {name: 'Andres', title: 'Developer'})""",
    """CREATE (a {name: 'Andres'}) RETURN a""",
    """MATCH (a:Person), (b:Person) WHERE a.name = 'Node A' AND b.name = 'Node B' CREATE (a)-[r:RELTYPE]->(b) RETURN r""",
    """MATCH (a:Person), (b:Person) WHERE a.name = 'Node A' AND b.name = 'Node B' CREATE (a)-[r:RELTYPE {name: a.name + '<->' + b.name}]->(b) RETURN r""",
    """CREATE p = (andres {name:'Andres'})-[:WORKS_AT]->(neo)<-[:WORKS_AT]-(michael {name: 'Michael'}) RETURN p""",
    """CREATE (n:Person $props) RETURN n""",
    """UNWIND $props AS map CREATE (n) SET n = map""",
    """MATCH (n:Useless) DELETE n""",
    """MATCH (n) DETACH DELETE n""",
    """MATCH (n {name: 'Andres'}) DETACH DELETE n""",
    """MATCH (n {name: 'Andres'})-[r:KNOWS]->() DELETE r""",
    """MATCH (n {name: 'Andres'}) SET n.surname = 'Taylor' RETURN n""",
    """MATCH (n {name: 'Andres'}) SET n.name = NULL RETURN n""",
    """MATCH (at {name: 'Andres'}), (pn {name: 'Peter'}) SET at = pn RETURN at, pn""",
    """MATCH (peter {name: 'Peter'}) SET peter += {hungry: TRUE, position: 'Entrepreneur'}""",
    """MATCH (n {name: 'Andres'}) SET n.surname = $surname RETURN n""",
    """MATCH (n {name: 'Andres'}) SET n = $props RETURN n""",
    """MATCH (n {name: 'Andres'}) SET n.position = 'Developer', n.surname = 'Taylor'""",
    """MATCH (n {name: 'Stefan'}) SET n:German RETURN n""",
    """MATCH (n {name: 'Emil'}) SET n:Swedish:Bossman RETURN n""",
    """MATCH (andres {name: 'Andres'}) REMOVE andres.age RETURN andres""",
    """MATCH (n {name: 'Peter'}) REMOVE n:German RETURN n""",
    """MATCH (n {name: 'Peter'}) REMOVE n:German:Swedish RETURN n""",
    """MERGE (robert:Critic) RETURN robert, labels(robert)""",
    """MERGE (charlie {name: 'Charlie Sheen', age: 10}) RETURN charlie""",
    """MERGE (michael:Person {name: 'Michael Douglas'}) RETURN michael.name, michael.bornIn""",
    """MATCH (person:Person) MERGE (city:City {name: person.bornIn}) RETURN person.name, person.bornIn, city""",
    """MATCH (charlie:Person {name: 'Charlie Sheen'}), (wallStreet:Movie {title: 'Wall Street'}) MERGE (charlie)-[r:ACTED_IN]->(wallStreet) RETURN charlie.name, type(r), wallStreet.title""",
    """MATCH (oliver:Person {name: 'Oliver Stone'}), (reiner:Person {name: 'Rob Reiner'}) MERGE (oliver)-[:DIRECTED]->(movie:Movie)<-[:ACTED_IN]-(reiner) RETURN movie""",
    """MATCH (charlie:Person {name: 'Charlie Sheen'}), (oliver:Person {name: 'Oliver Stone'}) MERGE (charlie)-[r:KNOWS]-(oliver) RETURN r""",
    """MATCH (person:Person) MERGE (city:City {name: person.bornIn}) MERGE (person)-[r:BORN_IN]->(city) RETURN person.name, person.bornIn, city""",
    """MATCH (person:Person) MERGE (person)-[r:HAS_CHAUFFEUR]->(chauffeur:Chauffeur {name: person.chauffeurName}) RETURN person.name, person.chauffeurName, chauffeur""",
    """MERGE (person:Person {name: $param.name, role: $param.role}) RETURN person.name, person.role""",
    """CALL db.labels""",
    """CALL dbms.procedures() YIELD name, signature WHERE name='dbms.listConfig' RETURN signature""",
    """CALL `db`.`labels`""",
    """CALL org.opencypher.procedure.example.addNodeToIndex('users', 0, 'name')""",
    """CALL org.opencypher.procedure.example.addNodeToIndex""",
    """CALL org.opencypher.procedure.example.addNodeToIndex('users', $node, 'name')""",
    """CALL org.opencypher.procedure.example.addNodeToIndex('users', 0)""",
    """CALL db.labels() YIELD label RETURN count(label) AS numLabels""",
    """CALL db.labels() YIELD label WHERE label CONTAINS 'User' RETURN count(label) AS numLabels""",
    """CALL db.propertyKeys() YIELD propertyKey AS prop MATCH (n) WHERE n[prop] IS NOT NULL RETURN prop, count(n) AS numNodes""",
    """MATCH (n:Actor) RETURN n.name AS name UNION ALL MATCH (n:Movie) RETURN n.title AS name""",
    """MATCH (n:Actor) RETURN n.name AS name UNION MATCH (n:Movie) RETURN n.title AS name""",
    """MATCH (a) CREATE ()""",
    """MATCH () CREATE () WITH * MATCH () CREATE ()""",
    """CREATE (a:X) RETURN a AS column UNION MATCH (x:X) CREATE () RETURN x as column""",
    """MATCH (n) WHERE exists(n.surname) RETURN n.name AS name, n.surname AS surname""",
    """MATCH (a) WHERE a.name = 'Alice' RETURN coalesce(a.hairColor, a.eyes)""",
    """MATCH (x:Developer)-[r]-() RETURN endNode(r)""",
    """MATCH (a) WHERE a.name = 'Eskil' RETURN a.array, head(a.array)""",
    """MATCH (a) RETURN id(a)""",
    """MATCH (a) WHERE a.name = 'Eskil' RETURN a.array, last(a.array)""",
    """MATCH p = (a)-[]->(b)-[]->(c) WHERE a.name = 'Alice' RETURN length(p)""",
    """CREATE (p:Person {name: 'Stefan', city: 'Berlin'}) RETURN properties(p)""",
    """RETURN size(['Alice', 'Bob'])""",
    """MATCH (a) WHERE a.name = 'Alice' RETURN size((a)-[]->()-[]->()) AS fof""",
    """MATCH (a) WHERE size(a.name)> 6 RETURN size(a.name)""",
    """MATCH (x:Developer)-[r]-() RETURN startNode(r)""",
    """RETURN timestamp()""",
    """RETURN toBoolean('TRUE'), toBoolean('not a boolean')""",
    """RETURN toFloat('11.5'), toFloat('not a number')""",
    """RETURN toInteger('42'), toInteger('not a number')""",
    """MATCH (n)-[r]->() WHERE n.name = 'Alice' RETURN type(r)""",
    """RETURN n, count(*)""",
    """MATCH (n:Person) RETURN avg(n.age)""",
    """MATCH (n:Person) RETURN collect(n.age)""",
    """MATCH (n {name: 'A'})-[]->(x) RETURN labels(n), n.age, count(*)""",
    """MATCH (n {name: 'A'})-[r]->() RETURN type(r), count(*)""",
    """MATCH (n {name: 'A'})-[]->(x) RETURN count(x)""",
    """MATCH (n:Person) RETURN count(n.age)""",
    """MATCH (me:Person)-[]->(friend:Person)-[]->(friend_of_friend:Person) WHERE me.name = 'A' RETURN count(DISTINCT friend_of_friend), count(friend_of_friend)""",
    """UNWIND [1, 'a', NULL, 0.2, 'b', '1', '99'] AS val RETURN max(val)""",
    """UNWIND [[1, 'a', 89],[1, 2]] AS val RETURN max(val)""",
    """MATCH (n:Person) RETURN max(n.age)""",
    """UNWIND [1, 'a', NULL, 0.2, 'b', '1', '99'] AS val RETURN min(val)""",
    """UNWIND ['d',[1, 2],['a', 'c', 23]] AS val RETURN min(val)""",
    """MATCH (n:Person) RETURN min(n.age)""",
    """MATCH (n:Person) RETURN percentileCont(n.age, 0.4)""",
    """MATCH (n:Person) RETURN percentileDisc(n.age, 0.5)""",
    """MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN stDev(n.age)""",
    """MATCH (n) WHERE n.name IN ['A', 'B', 'C'] RETURN stDevP(n.age)""",
    """MATCH (n:Person) RETURN sum(n.age)""",
    """MATCH (a) WHERE a.name = 'Alice' RETURN keys(a)""",
    """MATCH (a) WHERE a.name = 'Alice' RETURN labels(a)""",
    """MATCH p = (a)-[]->(b)-[]->(c) WHERE a.name = 'Alice' AND c.name = 'Eskil' RETURN nodes(p)""",
    """RETURN range(0, 10), range(2, 18, 3)""",
    """MATCH p = (a)-[]->(b)-[]->(c) WHERE a.name = 'Alice' AND c.name = 'Eskil' RETURN relationships(p)""",
    """WITH [4923, 'abc', 521, NULL, 487] AS ids RETURN reverse(ids)""",
    """MATCH (a) WHERE a.name = 'Eskil' RETURN a.array, tail(a.array)""",
    """MATCH (a), (e) WHERE a.name = 'Alice' AND e.name = 'Eskil' RETURN a.age, e.age, abs(a.age - e.age)""",
    """RETURN ceil(0.1)""",
    """RETURN floor(0.9)""",
    """RETURN rand()""",
    """RETURN round(3.141592)""",
    """RETURN sign(-17), sign(0.1)""",
    """RETURN e()""",
    """RETURN exp(2)""",
    """RETURN log(27)""",
    """RETURN log10(27)""",
    """RETURN sqrt(256)""",
    """RETURN acos(0.5)""",
    """RETURN asin(0.5)""",
    """RETURN atan(0.5)""",
    """RETURN atan2(0.5, 0.6)""",
    """RETURN cos(0.5)""",
    """RETURN cot(0.5)""",
    """RETURN degrees(3.14159)""",
    """RETURN pi()""",
    """RETURN radians(180)""",
    """RETURN sin(0.5)""",
    """RETURN tan(0.5)""",
    """RETURN left('hello', 3)""",
    """RETURN lTrim(' hello')""",
    """RETURN replace("hello", "l", "w")""",
    """RETURN reverse('anagram')""",
    """RETURN right('hello', 3)""",
    """RETURN rTrim('hello ')""",
    """RETURN split('one,two', ',')""",
    """RETURN substring('hello', 1, 3), substring('hello', 2)""",
    """RETURN toLower('HELLO')""",
    """RETURN toString(11.5), toString('already a string'), toString(TRUE )""",
    """RETURN toUpper('hello')""",
    """RETURN trim(' hello ')""",
    """MATCH (n) RETURN n //This is an end of line comment""",
    """MATCH (n)
    //This is a single line comment
    RETURN n""",
    """MATCH (n) WHERE n.property = '//This is NOT a comment' RETURN n""",
    """/* The following comment
    spans more than
    one line */
    MATCH (n)
    RETURN n""",
    """CYPHER 9 MATCH (a)-[]->(b) RETURN a, b""",
    """WITH [1, 1, 2, 2] AS coll UNWIND coll AS x WITH DISTINCT x RETURN collect(x) AS setValue""",  # 82
]
